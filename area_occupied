struct Point {
    x: i32,
    y: i32,
}
struct Rectangle {
    a: Point,
    b: Point,
}

fn area_occupied(xs: &Vec<Rectangle>) -> i32 {
    let mut total_area = 0; 
    let mut overlaps_area = 0; 
    for rect in xs {
        let width = (rect.b.x - rect.a.x).abs(); 
        let height = (rect.a.y - rect.b.y).abs(); 
        total_area += width * height; 
    }

    for i in 0..xs.len() {
        for j in (i + 1)..xs.len() {
            let r1 = &xs[i];
            let r2 = &xs[j];
            if r1.a.x < r2.b.x && r1.b.x > r2.a.x && r1.a.y > r2.b.y && r1.b.y < r2.a.y {
                let overlap_width = (r1.b.x.min(r2.b.x) - r1.a.x.max(r2.a.x)).abs();
                let overlap_height = (r1.a.y.min(r2.a.y) - r1.b.y.max(r2.b.y)).abs();
                overlaps_area += overlap_width * overlap_height; 
            }
        }
    }

    let actual_area = total_area - overlaps_area; 
    actual_area 
}

fn test_data() -> Vec<Rectangle> {
    vec![
        Rectangle {
            a: Point { x: 2, y: 9 },
            b: Point { x: 5, y: 3 },
        },
        Rectangle {
            a: Point { x: 1, y: 8 },
            b: Point { x: 11, y: 6 },
        },
        Rectangle {
            a: Point { x: 9, y: 10 },
            b: Point { x: 13, y: 2 },
        },
    ]
}


fn main() {
    let data = test_data();
    let occupied = area_occupied(&data);
    println!("Фактично зайнята площа: {}", occupied); 
}



Я написав програму для обчислення зайнятої площі прямокутників, представлених двома точками. Спочатку я визначив структури Point і Rectangle. 

Структура Point має дві координати x і y, які представляють позицію точки на площині. А структура Rectangle має дві точки — a і b, які задають ліва верхню та права нижня кути прямокутника.

Далі я реалізував функцію area_occupied, яка приймає вектор прямокутників. В середині цієї функції я створив змінну total_area, щоб зберігати загальну площу всіх прямокутників, і змінну overlaps_area, щоб зберігати площу перекриттів між прямокутниками.

У першому циклі я пройшовся по кожному прямокутнику в векторі. Я обчислив ширину та висоту кожного прямокутника за допомогою абсолютних значень, щоб переконатися, що вони завжди позитивні. Потім я додав площу кожного прямокутника до total_area.

Після цього я створив два вкладені цикли, щоб перевірити перекриття між всіма парами прямокутників. Перший цикл проходить по індексам прямокутників, а другий — по всіх наступних прямокутниках.

Я перевіряю, чи перекриваються два прямокутники за координатами. Якщо так, я обчислюю ширину та висоту області перекриття, використовуючи мінімальні та максимальні значення x і y, і додаю площу перекриття до overlaps_area.

Наприкінці я обчислюю зайняту площу, віднявши площу перекриттів від загальної площі всіх прямокутників. Результат зберігається в змінній actual_area.

У функції main я викликаю test_data, щоб отримати вектор тестових даних, а потім передаю його у функцію area_occupied. Я виводжу результат на екран за допомогою println!.
